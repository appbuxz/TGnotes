import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
import asyncio
import time

asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

API_TOKEN = '7587174199:AAF_C0oLWPu5KAtX34Oqsxe33quO9JdVLas'
bot = Bot(token=API_TOKEN)
dp = Dispatcher()


reminders_file = 'reminders.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
def load_reminders():
    try:
        with open(reminders_file, 'r') as f:
            reminders = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        reminders = {}
    return reminders

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–∞–π–ª
def save_reminders(reminders):
    with open(reminders_file, 'w') as f:
        json.dump(reminders, f, indent=4)

# /start message
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# /help command
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.reply(
        "/add - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É üìù\n"
        "/list ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üìã\n"
        "/remove <ID –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è> ‚Äî —É–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID ‚ùå\n"
        "/remind_hourly - –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π —á–∞—Å"
    )

# /add command
@dp.message(Command("add"))
async def cmd_add(message: types.Message):
    try:
        reminder_message = message.text.split(' ', 1)[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    except IndexError:
        await message.reply("‚ùó –û—à–∏–±–∫–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã —É–∫–∞–∑–∞–ª —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return

    reminders = load_reminders()
    
    user_id = str(message.from_user.id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è user_id
    if user_id not in reminders:
        reminders[user_id] = {"notes": {}}  # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á

    note_id = len(reminders[user_id]["notes"]) + 1  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
    reminders[user_id]["notes"][note_id] = reminder_message  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    
    save_reminders(reminders)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
    await message.reply(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '{reminder_message}' –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å ID {note_id}.")

# /list command
@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    reminders = load_reminders()
    user_id = str(message.from_user.id)
    
    if user_id in reminders and reminders[user_id]["notes"]:
        user_reminders = [f"{note_id}: {note}"
                          for note_id, note in reminders[user_id]["notes"].items()]
        await message.reply("üìã –¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n" + "\n".join(user_reminders))
    else:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

# /remove command
@dp.message(Command("remove"))
async def cmd_remove(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—Ä–æ–∫—É
        reminder_id = str(message.text.split()[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        reminders = load_reminders()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –æ–Ω–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if reminder_id in reminders.get(str(message.from_user.id), {}).get('notes', {}):
            del reminders[str(message.from_user.id)]['notes'][reminder_id]  # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            save_reminders(reminders)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await message.reply(f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å ID {reminder_id} —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await message.reply("‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except (IndexError, ValueError):
        await message.reply("‚ùó –û—à–∏–±–∫–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç—ã —É–∫–∞–∑–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID.")
#–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å
@dp.message(Command("remind_hourly"))
async def handle_hourly(message: types.Message):
    asyncio.create_task(hourly_reminder(message))
    await message.reply("–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ –∑–∞–º–µ—Ç–∫–∞—Ö –∫–∞–∂–¥—ã–π —á–∞—Å!üïê")

async def hourly_reminder(message: types.Message):
    while True:
        await asyncio.sleep(3600)  # –∫–∞–∂–¥—ã–π —á–∞—Å
        reminders = load_reminders()
        user_id = str(message.from_user.id)
        for user_id in reminders:
            try:
                await bot.send_message(chat_id=user_id, text=f"üïê –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:{reminders}")
                print("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

async def delete_webhook():
    await bot.delete_webhook()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º webhook
async def main():
    await delete_webhook()  # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫–∞–µ–º polling

if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º main() —Å await, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è asyncio.run()
    asyncio.get_event_loop().run_until_complete(main())